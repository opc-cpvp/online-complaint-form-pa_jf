
@{
    ViewData["Title"] = "DetailsPA";
}

@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@inject ComplaintFormCore.Resources.SharedViewLocalizer Localizer

@functions
{
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Context).RequestToken;
    }
}



<div id="surveyElement" style="display:inline-block;width:100%;">
    <survey :survey='survey' />
</div>

<div id="surveyResult"></div>

<center>
    <div id="div_navigation">
        <button id="btnSurveyPrev" onclick="survey.prevPage();" class="btn btn-primary">@Localizer.GetLocalizedString("btnSurveyPrev")</button>
        <button id="btnSurveyNext" onclick="survey.nextPage();" class="btn btn-primary">@Localizer.GetLocalizedString("btnSurveyNext")</button>
        <button id="btnShowPreview" onclick="survey.showPreview();" class="btn btn-primary">@Localizer.GetLocalizedString("btnShowPreview")</button>
        <button id="btnComplete" onclick="survey.doComplete();" class="btn btn-primary">@Localizer.GetLocalizedString("btnComplete")</button>
        <button id="btnEndSession" onclick="endSession()" class="btn btn-primary">@Localizer.GetLocalizedString("btnEndSession")</button>
        @*<button id="btnSave" onclick="save()" class="btn btn-primary">Save</button>*@
    </div>
</center>

@section CustomStyles {

    <link href="~/css/site.css" rel="stylesheet" />
}

@section CustomScripts {
    <script src="~/lib/vue/vue.min.js"></script>
    <script src="~/lib/survey/survey.vue.OPC.js"></script>
    <script src="~/lib/survey/widgetCheckboxHtml.js"></script>
    <script src="~/lib/survey/widgetCommentHtml.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/showdown/1.9.1/showdown.min.js"></script>

    <script>
        //$(document).ready(function () {


        //});



        //  This is to open the additional information div when a checkbox is being checked or hide it when the checkbox is un-checked.
        //  It will also remove or add the item being chekced or unchecked from the json data
        function checkBoxInfoPopup(checkbox) {

            var parent = $(checkbox).closest("div");

            if ($(checkbox).is(':checked')) {
                parent.find(".info-popup").show();

                //  adding the checked item to the json object
                survey.data[checkbox.name].push(checkbox.value);
            }
            else {

                parent.find(".info-popup").hide();

                //  removing the un-checked item from the json object
                for (var i = 0; i < survey.data[checkbox.name].length; i++) {
                    if (survey.data[checkbox.name][i] === checkbox.value)
                    {
                        survey.data[checkbox.name].splice(i, 1);
                    }
                }
            }
        }

        //  Function for updating (show/hide) the navigation buttons
        function doOnCurrentPageChanged(survey) {

            document
                .getElementById('btnSurveyPrev')
                .style
                .display = !survey.isFirstPage
                    ? "inline"
                    : "none";
            document
                .getElementById('btnSurveyNext')
                .style
                .display = !survey.isLastPage
                    ? "inline"
                    : "none";
            document
                .getElementById('btnShowPreview')
                .style
                .display = survey.isLastPage && !survey.isDisplayMode
                    ? "inline"
                    : "none";
            document
                .getElementById('btnComplete')
                .style
                .display = survey.isDisplayMode
                    ? "inline"
                    : "none";

            saveStateLocally(survey);
        }

        //  Will return true if a dropdown has a selected item otherwise false.
        function HasSelectedItem(params) {
            var value = params[0];
           // alert(value)
            // value is the id of the selected item
            return value !== "";
        }

        function endSession() {
            var url = "/Home/Index";
            window.location.href = url;
        }

        function save() {
            alert("Not implemented. Probably need to trigger Complete on the survey.");
        }

        var storageName = "SurveyJS_LoadState";

        function loadStateLocally(survey) {
            //Here should be the code to load the data from your database
            var storageSt = window
                .localStorage
                .getItem(storageName) || "";

            var res = {};
            if (storageSt)
                res = JSON.parse(storageSt); //Create the survey state for the demo. This line should be deleted in the real app.
            else
                res = {
                    currentPageNo: 1,
                    data: {
                        "type_complaint": [""]
                    }
                };

            //Set the loaded data into the survey.
            if (res.currentPageNo)
                survey.currentPageNo = res.currentPageNo;
            if (res.data)
                survey.data = res.data;
        }

        function saveStateLocally(survey) {
            var res = {
                currentPageNo: survey.currentPageNo,
                data: survey.data
            };
            //Here should be the code to save the data into your database
            window
                .localStorage
                .setItem(storageName, JSON.stringify(res));
        }

        // Register the function for use in SurveyJS expressions. This function validates that at least one selection was made in a <select>
        Survey
            .FunctionFactory
            .Instance
            .register("HasSelectedItem", HasSelectedItem);

        //  You may add a new property into all question types, panel, page and survey. If you add a property into base type, like “question” then it will be available
        //  in all its successors.“questionbase” is base class for all questions and “question” is base class for all questions that has a value property.
        //  “html” question is derived from “questionbase” and not “question” type.
        Survey.JsonObject.metaData.addProperty("question",
            {
                name: "showOnPreview", default: true
            });

        Survey.JsonObject.metaData.addProperty("questionbase",
            {
                name: "showOnPreview", default: true
            });

        Survey.JsonObject.metaData.addProperty("page", {
            name: "showOnPreview", default: true
        });

        //  Add a new property for each item choices (to the native text, value). This is used for checkboxes with addtional Html info
        //  but could be used for radiobutton as well.
        Survey.JsonObject.metaData.addProperty("itemvalue", {
            name: "htmlAdditionalInfo:text"
        });

        //Survey
        //    .StylesManager
        //    .applyTheme("default");
       


        var json = "/sample-data/survey_pa_complaint_" + '@System.Threading.Thread.CurrentThread.CurrentCulture.TwoLetterISOLanguageName' + ".json";

        fetch(json)
            .then(response => response.json())
            .then(json => {
                survey = new Survey.Model(json);

                // EVENT bindings
                survey
                    .onComplete
                    .add(function (result) {

                        let dataType = 'application/json; charset=utf-8';
                        let data = JSON.stringify(result.data, null, 3);

                        console.log(data);
                        debugger

                        $.ajax({
                            type: "POST",
                            url: "@Url.Action("Survey")",
                            headers: { "RequestVerificationToken": '@GetAntiXsrfRequestToken()' },
                            dataType: 'json',
                            contentType: dataType,
                            data: data,
                            success: function (msg) {

                                //  Hide the navigation buttons
                                $("#div_navigation").hide();

                                window
                                    .localStorage
                                    .setItem(storageName, "");
                            },
                            error: function (req, status, error) {
                                alert(error);
                            }
                        });
                    });

                //survey
                //    .onServerValidateQuestions
                //    .add(function (result) {

                //        //options.data contains the data for the current page.
                //        var countryName = options.data["country"];
                //        //If the question is empty then do nothing
                //        if (!countryName)
                //            options.complete();

                //        //call the ajax method
                //        $.ajax({ url: "https://restcountries.eu/rest/v2/all" })
                //            .then(function (data) {
                //                var found = false;
                //                var countries = data;
                //                for (var i = 0; i < countries.length; i++) {
                //                    if (countries[i].name == countryName) {
                //                        found = true;
                //                        break;
                //                    }
                //                }
                //                //if the country is unknown, add the error
                //                if (!found)
                //                    options.errors["country"] = "The country name '" + countryName + "' is not in this list: https://restcountries.eu/rest/v2/all";

                //                //tell survey that we are done with the server validation
                //                options.complete();
                //            });
                //    });


                //  THIS IS THE SHOWDOWN MARKDOWN CODE***************
                var converter = new showdown.Converter();
                converter.simpleLineBreaks = true;
                converter.tasklists = true;

                survey
                    .onTextMarkdown
                    .add(function (survey, options) {

                        //convert the mardown text to html
                        var str = converter.makeHtml(options.text);

                        //remove root paragraphs <p></p>
                        str = str.substring(3);
                        str = str.substring(0, str.length - 4);

                        //set html
                        options.html = str;
                    });

                survey
                    .onValueChanged
                    .add(function (sender, options) {

                        if (options.question.getType() === 'comment') {
                            if (!options.value || (!options.value.trim() && options.value.trim() !== 0 && options.value.trim() !== false)) {

                                 //  Adding a . for comment questions that are not answered so they can be displayed in the preview
                                sender.getQuestionByName(options.name).value = ".";
                            }
                        }
                    });

                survey
                    .onAfterRenderQuestion
                    .add(function (survey, options) {

                        if (options.question.getType() === 'comment') {
                            if (!options.question.value || (!options.question.value.trim() && options.question.value.trim() !== 0 && options.question.value.trim() !== false)) {

                                //  Adding a . for comment questions that are not answered so they can be displayed in the preview
                                options.question.value = ".";
                            }
                        }


                        //  If it is the preview mode...
                        if (survey.isDisplayMode == true) {

                            if (options.question.showOnPreview == false) {
                                //  don't show the question.... but how?
                            }

                            if (options.question.page.showOnPreview == false) {
                                //options.question.page.visible = false;
                            }

                            //  do not show the 'description' property
                            options.question.description = "";

                            //  This will remove the html questions in Preview mode.
                            if (options.question.getType() === 'html') {
                                options.question.html = "";
                            }

                        }

                        //  This is to add * at the beginning of a required question. The property requiredText
                        //  is set as 'required' later in the code
                        if (options.question.isRequired == true && !options.question.title.includes("<span class='sv_q_required_text'>&ast; </span>")) {

                            options.question.title = "<span class='sv_q_required_text'>&ast; </span>" + options.question.title;
                        }
                    });


                // DICTIONNARY
                survey.requiredText = "(required)";
                survey.setVariable("part_a_2_title", "Part A: Preliminary information (Identify institution)-Privacy complaint form (federal institution)");
                survey.setVariable("part_b_1_title", "Part B: Steps taken (Writing to the ATIP Coordinator)-Privacy complaints form (federal institution)");

                survey.showPreviewBeforeComplete = 'showAnsweredQuestions';
               // survey.showPreviewBeforeComplete = 'showAllQuestions';

                //  onHidden -> survey clears the question value when the question becomes invisible.
                //  If a question has an answer value and it was invisible initially, a survey clears the value on completing.
                survey.clearInvisibleValues = "onHidden ";

                survey.questionErrorLocation = "top";

                //  Those are not needed if we have our custom navigation. They are for the built iin navigation only
                survey.pagePrevText = "Previous Screen";
                survey.pageNextText = "Continue";
                survey.completeText = "Complete";

                //  TODO:   for now, in order to be able to use the checkboxes with addiotional htnl info, we
                //          need to specify the array object type_complaint. There has to be a more elegant way of doing this.
                //survey.data = {
                //    "type_complaint": [""]
                //};

                //survey.data = {
                //    "filing_own_behalf": "yourself",
                //    "raised_concern_writing": "yes",
                //    "type_complaint": [
                //        "NatureOfComplaintOther",
                //        "NatureOfComplaintDelay",
                //        "NatureOfComplaintExtensionOfTime",
                //        "NatureOfComplaintCollection"
                //    ],
                //    "description_IsEmployee": "genral_public",
                //    "AdditionalComments": "iuyiuyuiyiuy",
                //    "complainant_HaveYouSubmittedBefore": "No",
                //    "complainant_title": "Mr.",
                //    "complainant_first_name": "jf",
                //    "complainant_last_name": "brouillette",
                //    "complainant_email": "jf@hotmail.com",
                //    "complainant_mailing_address": "66",
                //    "complainant_city": "gat",
                //    "complainant_postal_code": "J9A2V5",
                //    "complainant_daytime_phone": "6135656667",
                //    "complainant_NeedsDisabilityAccommodation": "Yes",
                //    "complainant_NeedsDisabilityAccommodation_details": "iuyuiyiuyiuy",
                //    "documentation_type": "none",
                //    "WhatWouldResolveYourComplaintDetailsPA": "gsdgdfgsdf",
                //    "SummarizeAttemptsToResolvePrivacyMatter": "gdfghjvbcvbcxvbxcvbxbcvb",
                //    "institution": "3",
                //    "complainant_country": "CA",
                //    "complainant_provinces": "2",
                //    "DateSentRequests": "qwerewr",
                //    "WordingOfRequest": "hgdffgh",
                //    "MoreDetailsOfRequest": "oiuyoiuo",
                //    "DateOfFinalAnswer": "gfhfjgj",
                //    "DidNoRecordExist": "Yes",
                //    "InstitutionAgreedRequestOnInformalBasis": "Not sure",
                //    "SummarizeYourConcernsAndAnyStepsTaken_A": "poiuiop"
                //};
                
                //Load the initial state
                loadStateLocally(survey);

                //  Use for our custom navigation
                survey
                    .onCurrentPageChanged
                    .add(doOnCurrentPageChanged);

                doOnCurrentPageChanged(survey);

                survey.onCompleting.add(function (sender, options) {
                    options.allowComplete = confirm('Do you want to complete the survey?');
                });


                //  The next 2 lines are for saving data after each page change
                //survey.sendResultOnPageNext = true;
                //survey.onPartialSend.add(function (survey) {
                //    //saveSurveyData(survey);
                //    alert(JSON.stringify(survey.data));
                //});

                var app = new Vue({
                    el: '#surveyElement',
                    data: {
                        survey: survey
                    }
                });
            });
    </script>
}

