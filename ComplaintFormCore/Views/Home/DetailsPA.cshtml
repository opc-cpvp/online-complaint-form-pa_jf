@{
    ViewData["Title"] = "DetailsPA";
}

@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@inject ComplaintFormCore.Resources.SharedViewLocalizer Localizer

@functions
{
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Context).RequestToken;
    }
}

<div id="surveyElement" style="display:inline-block;width:100%;">
    <survey :survey='survey' />
</div>

<div id="surveyResult"></div>

<center>
    <div id="div_navigation">
        <button id="btnSurveyPrev" onclick="survey.prevPage();" class="btn btn-primary">@Localizer.GetLocalizedString("btnSurveyPrev")</button>
        <button id="btnSurveyNext" onclick="survey.nextPage();" class="btn btn-primary">@Localizer.GetLocalizedString("btnSurveyNext")</button>
        <button id="btnShowPreview" onclick="showPreview(survey);" class="btn btn-primary">@Localizer.GetLocalizedString("btnShowPreview")</button>
        <button id="btnComplete" onclick="survey.doComplete();" class="btn btn-primary">@Localizer.GetLocalizedString("btnComplete")</button>
        <button id="btnEndSession" onclick="endSession()" class="btn btn-primary">@Localizer.GetLocalizedString("btnEndSession")</button>
        <button id="btnStart" onclick="startSurvey(survey);" class="btn btn-primary">Start</button>
    </div>
</center>

@section CustomStyles {
    <link href="~/css/site.css" rel="stylesheet" />
}

@section CustomScripts {
    <script src="~/lib/vue/vue.js"></script>
    <script src="https://surveyjs.azureedge.net/1.7.23/survey.vue.js"></script>
    <script src="~/js/survey/surveyHelper.js"></script>
    <script src="~/js/survey/surveyInit.js"></script>
    <script src="~/js/survey/surveyLocalStorage.js"></script>
    <script src="~/js/survey/surveyFile.js"></script>
    <script src="~/lib/promise-polyfill/polyfill.js"></script>
    <script src="~/lib/fetch/fetch.js"></script>
    

    <script src="~/js/survey/widgets/widgetCheckboxHtml.js"></script>
    <script src="~/js/survey/widgets/widgetCommentHtml.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/showdown/1.9.1/showdown.min.js"></script>


    <script type="text/javascript">

        //  This is the total file sizes
        var multipleFileMaxSize = 26214400;

        //  This function is to build the html for the question of type html documentation_info.
        //  I have tried to get this working in a more elegant way but no success
        function buildDocumentationInfoSection(survey, options) {

            options.question.html = "<section class='alert alert-info col-md-12'>";

            if (survey.locale == "fr") {
                options.question.html += "<p>D’après les réponses que vous avez fournies jusqu’à présent, vous devez joindre les documents suivants à votre plainte :</p>";
            }
            else {
                options.question.html += "<p>Based on your responses so far, you should attach the following documents with your complaint:</p>";
            }

            options.question.html += "<ul>";

            options.question.html += "<li class='mrgn-bttm-sm'>";
            if (survey.locale == "fr") {
                options.question.html += "une copie des réponses par écrit que vous avez reçues de l’organisation au sujet de vos préoccupations en matière de protection de la vie privée (le cas échéant)";
            }
            else {
                options.question.html += "a copy of any written responses you received from the organization about your privacy concerns";
            }
            options.question.html += "</li>";

            options.question.html += "<li class='mrgn-bttm-sm'>";
            if (survey.locale == "fr") {
                options.question.html += "une copie de votre demande à l’institution";
            }
            else {
                options.question.html += "a copy of your request to the institution";
            }
            options.question.html += "</li>";

            if (survey.data["RaisedPrivacyToAtipCoordinator"] == 'yes') {

                options.question.html += "<li class='mrgn-bttm-sm'>";
                if (survey.locale == "fr") {
                    options.question.html += "une copie de votre correspondance avec l’institution au sujet de vos préoccupations en matière de protection de la vie privée, y compris vos tentatives de faire part de vos préoccupations au coordonnateur de l’accès à l’information et de la protection des renseignements personnels (AIPRP) de l’institution";
                }
                else {
                    options.question.html += "a copy of your correspondence with the institution about your privacy concerns, including your attempts to escalate your concerns to the institution’s Access to Information and Privacy (ATIP) Coordinator";
                }
                options.question.html += "</li>";
            }

            if (survey.data["FilingComplaintOnOwnBehalf"] == 'someone_else') {
                options.question.html += "<li class='mrgn-bttm-sm'>";
                if (survey.locale == "fr") {
                    options.question.html += "votre formulaire d’autorisation de représentation signé par le plaignant";
                }
                else {
                    options.question.html += "your representative authorization form signed by the complainant";
                }
                options.question.html += "</li>";
            }

            if (survey.data["NatureOfComplaint"].filter(x => x == "NatureOfComplaintDenialOfAccess").length > 0) {
                options.question.html += "<li class='mrgn-bttm-sm'>";
                if (survey.locale == "fr") {
                    options.question.html += "vos demandes d’accès et toute réponse reçue de l’institution";
                }
                else {
                    options.question.html += "your access request(s) and any reply(ies) received from the institution";
                }
                options.question.html += "</li>";
            }

            options.question.html += "</ul>";

            if (survey.locale == "fr") {
                options.question.html += "<p>Vous pouvez joindre les documents à l’appui à cette plainte en ligne ou les envoyer par la poste séparément.</p>";
            }
            else {
                options.question.html += "<p>You can either attach supporting documents to this online complaint or you can mail documents separately.</p>";
            }

            options.question.html += "</section>";
        }

        function onCurrentPageChanged_saveState(survey) {

            saveStateLocally(survey, storageName_PA);
        }

        //  This is to get the total number of bytes for both file uploads.
        //  We will compare with the max value later.
        //  Note that the file size is being stored in file.content
        function getTotalFileSize(survey, options){

            var totalBytes = 0;

            (options.question.value).forEach(function (fileItem) {
                totalBytes = totalBytes + parseInt(fileItem.content);
            });

            //  We need to calculate the total size of all files for both file upload

            if(options.question.name == "documentation_file_upload"){

                var rep_file_upload = survey.getQuestionByName("documentation_file_upload_rep");

                if(rep_file_upload && rep_file_upload.value){

                    (rep_file_upload.value).forEach(function (fileItem) {
                        totalBytes = totalBytes + parseInt(fileItem.content);
                    });
                }
            }
            else  if(options.question.name == "documentation_file_upload_rep"){

                var file_upload = survey.getQuestionByName("documentation_file_upload");

                if(file_upload && file_upload.value){

                    (file_upload.value).forEach(function (fileItem) {
                        totalBytes = totalBytes + parseInt(fileItem.content);
                    });
                }
            }

            return totalBytes;
        }

        initSurvey(Survey);
        initSurveyFile(Survey);

        var json = "/sample-data/survey_pa_complaint.json";

        fetch(json)
            .then(response => response.json())
            .then(json => {

                survey = new Survey.Model(json);

                survey.complaintId = '@ViewBag.token'

                //  This needs to be here
                survey.locale = '@System.Threading.Thread.CurrentThread.CurrentCulture.TwoLetterISOLanguageName';

                //  Add events only applicable to this page **********************

                //  ISSUE WITH THE FLOW: When calling survey.onComplete the completed page shows right away. This is
                //  not desired. If the validation doesn't pas, we don't want to go to the completed page. So to do that,
                //  we call survey.onCompleting.
                //	The event onCompleting is fired before the survey is completed and the onComplete event is fired.
                //  You can prevent the survey from completing by setting options.allowComplete to false
                //  sender - the survey object that fires the event.
                //  NOTE:   The api call needs to be done synchronously for the onComplete event to fire.
                //          This is because the call is waiting for options.allowComplete = true
                var allowComplete = false;
              

                survey
                    .onCompleting
                    .add(function (sender, options) {

                        options.allowComplete = allowComplete;

                        //let data = JSON.stringify(sender.data, null, 3);

                        var params = { 'complaintId': sender.complaintId }
                        let query = Object.keys(params).map(k => encodeURIComponent(k) + '=' + encodeURIComponent(params[k])).join('&');
                        var uri = "/api/PASurvey/Validate?" + query;

                        const validate = async () => {

                            const response = await fetch(uri, {
                                method: 'POST',
                                headers: {
                                    'Accept': 'application/json',
                                    'Content-Type': 'application/json; charset=utf-8'
                                },
                                body: JSON.stringify(sender.data)

                            });

                            const validationResponse = await response;

                            if (validationResponse.status == 200) {
                                options.allowComplete = false;
           
                            }
                            else {
                                if (validationResponse.json) {
                                    validationResponse.json().then(function (error) {
                                        printProblemDetails(error);
                                    });
                                }
                                else {
                                    alert("oopsy");
                                }

                                //return false;
                            }
                        }


                        //    options.allowComplete = validate() == true;

                        validate();
                        //options.allowComplete = allowComplete;
                        //validate().catch(function (error) {
                        //    console.warn(error);
                        //});
                    });

               

                survey
                    .onComplete
                    .add(function (sender, options) {

                        var params = { 'complaintId': sender.complaintId }
                        let query = Object.keys(params).map(k => encodeURIComponent(k) + '=' + encodeURIComponent(params[k])).join('&');
                        var uri = "/api/PASurvey/Validate?" + query;

                        async function complete() {

                            let completeResponse = await fetch(uri, {
                                method: 'POST',
                                headers: {
                                    'Accept': 'application/json',
                                    'Content-Type': 'application/json; charset=utf-8'
                                },
                                body: JSON.stringify(sender.data)

                            });

                            if (completeResponse.status == 200) {

                                //  Hide the navigation buttons
                                $("#div_navigation").hide();

                                //  Update the file reference number
                                var response = JSON.parse(xhr.response);
                                $("#sp_survey_file_number").html(response.referenceNumber);

                                //survey.clear(true, true);
                                //clearLocalStorage(storageName_PA);
                                saveStateLocally(survey, storageName_PA);

                                console.log(data);

                            }
                            else {
                                if (completeResponse.json) {
                                    completeResponse.json().then(function (error) {
                                        printProblemDetails(error);
                                    });
                                }
                                else {
                                    alert("oopsy");
                                }
                            }
                        }

                        complete().catch(function (error) {
                            console.warn(error);
                        });


                        ////let dataType = 'application/json; charset=utf-8';
                        //let data = JSON.stringify(sender.data, null, 3);

                        //var xhr = new XMLHttpRequest();
                        //xhr.open("POST", "/api/PASurvey/Complete?complaintId=" + sender.complaintId);
                        //xhr.setRequestHeader("Content-Type", "application/json; charset=utf-8");
                        //xhr.onload = xhr.onerror = function (result) {

                        //    if (xhr.status == 200) {

                        //        //  Hide the navigation buttons
                        //        $("#div_navigation").hide();

                        //        //  Update the file reference number
                        //        var response = JSON.parse(xhr.response);
                        //        $("#sp_survey_file_number").html(response.referenceNumber);

                        //        //survey.clear(true, true);
                        //        //clearLocalStorage(storageName_PA);
                        //        saveStateLocally(survey, storageName_PA);

                        //        console.log(data);

                        //    } else if (xhr.status == 400) {

                        //        var response = JSON.parse(xhr.response);
                        //        alert(response.detail);
                        //    }
                        //    else {
                        //        //Error
                        //        options.showDataSavingError(); // you may pass a text parameter to show your own text
                        //    }
                        //};
                        //xhr.send(data);
                    });

                survey
                    .onAfterRenderQuestion
                    .add(function (survey, options) {

                        if (options.question.getType() === "html" && options.question.name == "documentation_info") {

                            buildDocumentationInfoSection(survey, options);
                        }
                        else if (options.question.getType() === "file" && options.question.value){

                            //  Getting the total size of all uploaded files
                            var totalBytes = getTotalFileSize(survey, options);

                             var sizeInMB = (totalBytes / 1000000).toFixed(2);

                            //  Setting up the <meter> values
                            $("#sp_total").html(sizeInMB);
                            $("#meter_upload_total_mb").val(totalBytes);
                        }
                    });

                //  Adding particular event for this page only
                survey
                    .onCurrentPageChanged
                    .add(function (survey, options) {
                        onCurrentPageChanged_saveState(survey);
                    });

                 survey
                    .onValidateQuestion
                    .add(function (sender, options) {

                        if (options.question.getType() === "file" && options.question.value) {

                            //  Getting the total size of all uploaded files
                            var totalBytes = getTotalFileSize(survey, options);

                            if(multipleFileMaxSize > 0 && totalBytes > multipleFileMaxSize){
                                options.error = getTranslation(options.question.multipleFileMaxSizeErrorMessage);
                                //return false;
                            }

                            var sizeInMB = (totalBytes / 1000000).toFixed(2);

                            //  Setting up the <meter> values
                            $("#sp_total").html(sizeInMB);
                            $("#meter_upload_total_mb").val(totalBytes);
                        }
                    });

                survey
                    .onServerValidateQuestions
                    .add(function (sender, options) {

                        if (options.data["documentation_type"] && (options.data["documentation_type"] == "upload" || options.data["documentation_type"] == "both")) {

                            //  Validating the documentation page if and only if there is documents to be validated

                            var params = { 'complaintId': sender.complaintId }
                            let query = Object.keys(params).map(k => encodeURIComponent(k) + '=' + encodeURIComponent(params[k])).join('&');
                            var uri = "/api/PASurvey/ValidateAttachments?" + query;

                            fetch(uri, {
                                method: 'POST',
                                headers: {
                                    'Accept': 'application/json',
                                    'Content-Type': 'application/json; charset=utf-8'
                                },
                                body: JSON.stringify(options.data)

                            }).then(function (response) {
                                switch (response.status) {
                                    case 200:
                                        //  This will allowed the validation to pass and go to the next page
                                        options.complete();
                                        break;
                                    case 400:
                                    case 500:
                                        if (response.json) {
                                            response.json().then(function (problem) {
                                                printProblemDetails(problem);

                                            });
                                        }
                                        else {
                                            alert("oopsy");
                                        }
                                        break;

                                    default:
                                        alert("oopsy");
                                }
                            }).catch(function (error) {
                                console.warn(error);
                            });
                        }
                        else {
                            options.complete();
                        }
                    });

                // ****Event *****************************************************

                initSurveyModelEvents(survey);

                initSurveyModelProperties(survey);

                initSurveyFileModelEvents(survey);


                //  TODO:   for now, in order to be able to use the checkboxes with addiotional htnl info, we
                //          need to specify the array object type_complaint. There has to be a more elegant way of doing this.
                //var defaultData  = { };

                //var defaultData = {
                //    "type_complaint": []
                //};

                var defaultData = {
                    "FilingComplaintOnOwnBehalf": "yourself",
                    "RaisedPrivacyToAtipCoordinator": "yes",
                    "WhichFederalGovernementInstitutionComplaintAgainst": "3",
                    "NatureOfComplaint": [
                        "NatureOfComplaintOther",
                        "NatureOfComplaintDelay",
                        "NatureOfComplaintExtensionOfTime",
                        "NatureOfComplaintCollection"
                    ],
                    "IsEmployeeChoice": "general_public",
                    "AdditionalComments": "iuyiuyuiyiuy",
                    "complainant_HaveYouSubmittedBeforeChoice": "no",
                    "complainant_FormOfAddress": "Mr.",
                    "complainant_FirstName": "jf",
                    "complainant_LastName": "brouillette",
                    "complainant_Email": "jf@hotmail.com",
                    "complainant_MailingAddress": "66",
                    "complainant_City": "gat",
                    "complainant_PostalCode": "J9A2V5",
                    "complainant_DayTimeNumber": "6135656667",
                    "NeedsDisabilityAccommodationChoice": "yes",
                    "DisabilityAccommodation": "iuyuiyiuyiuy",
                    "complainant_Country": "CA",
                    "complainant_ProvinceOrState": "2",
                    "reprensentative_title": "Mr.",
                    "reprensentative_FirstName": "jf",
                    "reprensentative_LastName": "brouillette",
                    "reprensentative_Email": "jf@hotmail.com",
                    "reprensentative_MailingAddress": "66",
                    "reprensentative_City": "gat",
                    "reprensentative_PostalCode": "J9A2V5",
                    "reprensentative_DayTimeNumber": "6135656667",
                    "documentation_type": "none",
                    "WhatWouldResolveYourComplaint": "gsdgdfgsdf",
                    "SummarizeAttemptsToResolvePrivacyMatter": "gdfghjvbcvbcxvbxcvbxbcvb",
                    "DateSentRequests": "qwerewr",
                    "WordingOfRequest": "hgdffgh",
                    "MoreDetailsOfRequest": "oiuyoiuo",
                    "DateOfFinalAnswer": "gfhfjgj",
                    "DidNoRecordExistChoice": "yes",
                    "InstitutionAgreedRequestOnInformalBasis": "not_sure",
                    "SummarizeYourConcernsAndAnyStepsTaken": "poiuiop"
                };

                //  Load the initial state
                loadStateLocally(survey, storageName_PA, defaultData);

                //  Save the state back to local storage
                onCurrentPageChanged_saveState(survey);

                //  Call the event to set the navigation buttons on page load
                onCurrentPageChanged_updateNavButtons(survey);

                // DICTIONNARY - this is just to show how to use localization
                //survey.setVariable("part_a_2_title", "Part A: Preliminary information (Identify institution)-Privacy complaint form (federal institution)");
                //survey.setVariable("part_b_1_title", "Part B: Steps taken (Writing to the ATIP Coordinator)-Privacy complaints form (federal institution)");

                var app = new Vue({
                    el: '#surveyElement',
                    data: {
                        survey: survey
                    }

                });
            });
    </script>
}

