@inject ComplaintFormCore.Resources.SharedViewLocalizer Localizer

@section CustomStyles {

    <link href="~/css/site.css" rel="stylesheet" />
}

@section CustomScripts {

    <script src="~/lib/vue/vue.js"></script>

    <script src="https://surveyjs.azureedge.net/1.7.23/survey.vue.js"></script>
    <script src="~/js/survey/surveyHelper.js"></script>
    <script src="~/js/survey/surveyInit.js"></script>
    <script src="~/js/survey/surveyLocalStorage.js"></script>
    <script src="~/js/survey/widgets/widgetCommentHtml.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/showdown/1.9.1/showdown.min.js"></script>

    <script>

        $(function () {
            $('#input_upload').change(function () {
                debugger
                var file = this.files[0];

                var formData = new FormData();
                //formData.append('SurveyId', sender.surveyId);
                formData.append(file, file.name);
                //formData.append("filename", file.n)

                $.ajax({
                    url: "/api/File",
                    type: "GET",
                    success: function (data) {
                        
                    },
                    error: function (xhr, status, error) {
                        //var err = eval("(" + xhr.responseText + ")");
                        alert(xhr.responseText);
                    },
                    async: true,
                    data: formData,
                    cache: false,
                    contentType: false,
                    processData: false,
                    timeout: 60000
                });

                $.ajax({
                    url: "/api/File/Upload",
                    type: "POST",
                    success: function (data) {
                        //var content = data.replace('dxsfile:', 'https://api.surveyjs.io/public/v1/Survey/file?filePath=');
                        //if (data.indexOf("dxsimage:") === 0) {
                        //    content = data.replace('dxsimage:', 'https://api.surveyjs.io/public/v1/Survey/file?filePath=');
                        //}
                        options.callback("success", [
                            {
                                file: file,
                                content: content
                            }
                        ]);
                    },
                    error: function (xhr, status, error) {
                        //var err = eval("(" + xhr.responseText + ")");
                        alert(xhr.responseText);
                    },
                    async: true,
                    data: formData,
                    cache: false,
                    contentType: false,
                    processData: false,
                    timeout: 60000
                });

                //var input = this;
                //var url = $(this).val();
                //var ext = url.substring(url.lastIndexOf('.') + 1).toLowerCase();
                //if (input.files && input.files[0]) {
                //    var reader = new FileReader();

                //    reader.onload = function (e) {
                //        $('#img').attr('src', e.target.result);
                //    }
                //    reader.readAsDataURL(input.files[0]);
                //}
                //else {
                //    $('#img').attr('src', '/assets/no_preview.png');
                //}
            });

        });

        function onCurrentPageChanged_saveState(survey) {

            saveStateLocally(survey, storageName_Test);
        }

        // Survey
        //.StylesManager
        //.applyTheme("default");

        initSurvey(Survey);

        var json = "/sample-data/survey_test_2.json";

        fetch(json)
            .then(response => response.json())
            .then(json => {

                survey = new Survey.Model(json);

                //survey.SurveyTemplateText().replaceText('<div><p>hgfhgf</p></div>', "question", "radiogroup");

                //  This needs to be here
                survey.locale = '@System.Threading.Thread.CurrentThread.CurrentCulture.TwoLetterISOLanguageName';

                initSurveyModelEvents(survey);

                initSurveyModelProperties(survey);

                var defaultData = {};

                //  Load the initial state
                loadStateLocally(survey, storageName_Test, defaultData);

                //  Save the state back to local storage
                onCurrentPageChanged_saveState(survey);

                //  Call the event to set the navigation buttons on page load
                onCurrentPageChanged_updateNavButtons(survey);

                // onCurrentPageChanged_saveState(survey);

                //  Add events only applicable to this page **********************
                survey
                    .onComplete
                    .add(function (result) {

                        let data = JSON.stringify(result.data, null, 3);

                        console.log(data);

                        //  Hide the navigation buttons
                        $("#div_navigation").hide();

                        survey.clear(true, true);
                        clearLocalStorage(storageName_Test);
                    });


                survey
                    .onCurrentPageChanged
                    .add(onCurrentPageChanged_saveState);


                // ****Event *****************************************************

                var app = new Vue({
                    el: '#surveyElement',
                    data: {
                        survey: survey
                    }
                });
            });

    </script>
}

<div id="surveyElement" style="display:inline-block;width:100%;">
    <survey :survey='survey' />
</div>

<div id="surveyResult"></div>

<center>
    <div id="div_navigation">
        <button id="btnSurveyPrev" onclick="survey.prevPage();" class="btn btn-primary">@Localizer.GetLocalizedString("btnSurveyPrev")</button>
        <button id="btnSurveyNext" onclick="survey.nextPage();" class="btn btn-primary">@Localizer.GetLocalizedString("btnSurveyNext")</button>
        <button id="btnShowPreview" onclick="showPreview(survey);" class="btn btn-primary">@Localizer.GetLocalizedString("btnShowPreview")</button>
        <button id="btnComplete" onclick="survey.doComplete();" class="btn btn-primary">@Localizer.GetLocalizedString("btnComplete")</button>
        <button id="btnEndSession" onclick="endSession()" class="btn btn-primary">@Localizer.GetLocalizedString("btnEndSession")</button>
    </div>
</center>

<input type="file" id="input_upload" />
