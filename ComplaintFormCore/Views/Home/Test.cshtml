@inject ComplaintFormCore.Resources.SharedViewLocalizer Localizer

@section CustomStyles {

    <link href="~/css/site.css" rel="stylesheet" />
}

@section CustomScripts {

    <script src="~/lib/vue/vue.js"></script>

    <script src="https://surveyjs.azureedge.net/1.7.23/survey.vue.js"></script>
    <script src="~/js/survey/surveyHelper.js"></script>
    <script src="~/js/survey/surveyInit.js"></script>
    <script src="~/js/survey/surveyLocalStorage.js"></script>
    @*<script src="~/js/survey/widgets/widgetCommentHtml.js"></script>*@
    <script src="https://cdnjs.cloudflare.com/ajax/libs/showdown/1.9.1/showdown.min.js"></script>

    <script src="https://unpkg.com/jspdf@1.5.3/dist/jspdf.min.js"></script>
    <script src="https://surveyjs.azureedge.net/1.7.26/survey.pdf.js"></script>

    <script>

        function saveSurveyToPdf(filename, surveyModel) {

            var options = {
                fontSize: 14,
                margins: {
                    left: 10,
                    right: 10,
                    top: 10,
                    bot: 10
                },
                format: "a4",
                fontName: 'times',
                fontStyle: 'normal'
            };

            var surveyPDF = new SurveyPDF.SurveyPDF(json, options);
            surveyPDF.data = surveyModel.data;
            surveyPDF.save(filename);
        }

        function exportToPDF() {

            //var storageSt = window
            //    .localStorage
            //    .getItem(storageName_Test) || "";

            //var json = "/sample-data/survey_test.json";

            //fetch(json)
            //    .then(response => response.json())
            //    .then(json => {

            //       // survey = new Survey.Model(json);

            //        var data = {};
            //        if (storageSt) {
            //            data = JSON.parse(storageSt);

            //            survey.data = data;
            //            saveSurveyToPdf("surveyResult.pdf", survey, json);
            //        }
            //    });

            saveSurveyToPdf("surveyResult.pdf", survey, json);
        }

        function onCurrentPageChanged_saveState(survey) {

            saveStateLocally(survey, storageName_Test);
        }

        // Survey
        //.StylesManager
        //.applyTheme("default");

        initSurvey(Survey);

        var json = "/sample-data/survey_test_2.json";

        fetch(json)
            .then(response => response.json())
            .then(json => {

                survey = new Survey.Model(json);

                survey.complaintId = '@ViewBag.token';

                //survey.SurveyTemplateText().replaceText('<div><p>hgfhgf</p></div>', "question", "radiogroup");

                //  This needs to be here
                survey.locale = '@System.Threading.Thread.CurrentThread.CurrentCulture.TwoLetterISOLanguageName';

                initSurveyModelEvents(survey);

                initSurveyModelProperties(survey);

                var defaultData = {};

                //  Load the initial state
                loadStateLocally(survey, storageName_Test, defaultData);

                //  Save the state back to local storage
                onCurrentPageChanged_saveState(survey);

                //  Call the event to set the navigation buttons on page load
                onCurrentPageChanged_updateNavButtons(survey);

                // onCurrentPageChanged_saveState(survey);

                //  Add events only applicable to this page **********************
                survey
                    .onCompleting
                    .add(function (sender, options) {

                        options.allowComplete = false;

                        var data2 = {
                            "FilingComplaintOnOwnBehalf": "yourself",
                            "RaisedPrivacyToAtipCoordinator": "fsdafasd",
                            "WhichFederalGovernementInstitutionComplaintAgainst": "3",
                            "NatureOfComplaint": [
                                "NatureOfComplaintOther",
                                "NatureOfComplaintDelay",
                                "NatureOfComplaintExtensionOfTime",
                                "NatureOfComplaintCollection"
                            ],
                            "IsEmployeeChoice": "general_public",
                            "AdditionalComments": "iuyiuyuiyiuy",
                            "Complainant_HaveYouSubmittedBeforeChoice": "no",
                            "Complainant_FormOfAddress": "Mr.",
                            "Complainant_FirstName": "jf",
                            "Complainant_LastName": "brouillette",
                            "Complainant_Email": "jf@hotmail.com",
                            "Complainant_MailingAddress": "66",
                            "Complainant_City": "gat",
                            "Complainant_PostalCode": "J9A2V5",
                            "Complainant_DayTimeNumber": "6135656667",
                            "NeedsDisabilityAccommodationChoice": "yes",
                            "DisabilityAccommodation": "iuyuiyiuyiuy",
                            "Complainant_Country": "CA",
                            "Complainant_ProvinceOrState": "2",
                            "Reprensentative_FormOfAddress": "Mr.",
                            "Reprensentative_FirstName": "",
                            "Reprensentative_LastName": "brouillette",
                            "Reprensentative_Email": "jf@hotmail.com",
                            "Reprensentative_MailingAddress": "66",
                            "Reprensentative_City": "gat",
                            "Reprensentative_PostalCode": "J9A2V5",
                            "Reprensentative_DayTimeNumber": "6135656667",
                            "Documentation_type": "none",
                            "WhatWouldResolveYourComplaint": "gsdgdfgsdf",
                            "SummarizeAttemptsToResolvePrivacyMatter": "gdfghjvbcvbcxvbxcvbxbcvb",
                            "DateSentRequests": "gfdgfd",
                            "WordingOfRequest": "gdsfg",
                            "MoreDetailsOfRequest": "oiuyoiuo",
                            "DateOfFinalAnswer": "gfhfjgj",
                            "DidNoRecordExistChoice": "yes",
                            "InstitutionAgreedRequestOnInformalBasis": "not_sure",
                            "SummarizeYourConcernsAndAnyStepsTaken": "poiuiop",
                            "InformationIsTrue": [ "yesff" ],
                            "documentation_file_upload": [
                                { "name": "test.txt", "type": "text/plain", "content": "10921680" },
                                { "name": "test.txt", "type": "text/plain", "content": "10921680" },
                                { "name": "layout.txt", "type": "text/plain", "content": "2735" },
                                { "name": "New Text Document_one.txt", "type": "text/plain", "content": "4" }
                            ]
                        };

                        var params = { 'complaintId': sender.complaintId }
                        let query = Object.keys(params).map(k => encodeURIComponent(k) + '=' + encodeURIComponent(params[k])).join('&');
                        var uri = "/api/PASurvey/Validate?" + query;

                        fetch(uri, {
                            method: 'POST',
                            headers: {
                                'Accept': 'application/json',
                                'Content-Type': 'application/json; charset=utf-8'
                            },
                            body: JSON.stringify(data2)

                        }).then(function (response) {
                            switch (response.status) {
                                case 200:
                                    //  This will allowed the validation to pass and go to the next page
                                    options.complete();
                                    break;
                                case 400:
                                case 500:
                                    if (response.json) {
                                        response.json().then(function (error) {
                                            var message = "";

                                            if (error.title) {
                                                message += error.title + '\n';
                                            }

                                            if (error.detail) {
                                                message += error.detail + '\n';
                                            }

                                            if (error.errors) {
                                                printProblemDetails(error)
                                                for (const [key, value] of Object.entries(error.errors)) {
                                                    message += key + ':' + value + '\n';
                                                }
                                            }

                                            alert(message);
                                        });
                                    }
                                    else {
                                        alert("oopsy");
                                    }
                                    break;

                                default:
                                    alert("oopsy");
                            }
                        }).catch(function (error) {
                            console.warn(error);
                        });
                    });

                survey
                    .onComplete
                    .add(function (sender, options) {

                        //let data = JSON.stringify(result.data, null, 3);

                        //var data = {
                        //    "FilingComplaintOnOwnBehalf": "yourself",
                        //    "RaisedPrivacyToAtipCoordinator": "yes"
                        //};



                        var data = {
                            "FilingComplaintOnOwnBehalf": "yourself",
                            "RaisedPrivacyToAtipCoordinator": "yes",
                            "WhichFederalGovernementInstitutionComplaintAgainst": "3",
                            "NatureOfComplaint": [
                                "NatureOfComplaintOther",
                                "NatureOfComplaintDelay",
                                "NatureOfComplaintExtensionOfTime",
                                "NatureOfComplaintCollection"
                            ],
                            "IsEmployeeChoice": "general_public",
                            "AdditionalComments": "iuyiuyuiyiuy",
                            "Complainant_HaveYouSubmittedBeforeChoice": "no",
                            "Complainant_title": "Mr.",
                            "Complainant_FirstName": "jf",
                            "Complainant_LastName": "brouillette",
                            "Complainant_Email": "jf@hotmail.com",
                            "Complainant_MailingAddress": "66",
                            "Complainant_City": "gat",
                            "Complainant_PostalCode": "J9A2V5",
                            "Complainant_DayTimeNumber": "6135656667",
                            "NeedsDisabilityAccommodationChoice": "yes",
                            "DisabilityAccommodation": "iuyuiyiuyiuy",
                            "Complainant_Country": "CA",
                            "Complainant_ProvinceOrState": "2",
                            "Reprensentative_title": "Mr.",
                            "Reprensentative_FirstName": "jf",
                            "Reprensentative_LastName": "brouillette",
                            "Reprensentative_Email": "jf@hotmail.com",
                            "Reprensentative_MailingAddress": "66",
                            "Reprensentative_City": "gat",
                            "Reprensentative_PostalCode": "J9A2V5",
                            "Reprensentative_DayTimeNumber": "6135656667",
                            "Documentation_type": "none",
                            "WhatWouldResolveYourComplaint": "gsdgdfgsdf",
                            "SummarizeAttemptsToResolvePrivacyMatter": "gdfghjvbcvbcxvbxcvbxbcvb",
                            "DateSentRequests": "qwerewr",
                            "WordingOfRequest": "hgdffgh",
                            "MoreDetailsOfRequest": "oiuyoiuo",
                            "DateOfFinalAnswer": "gfhfjgj",
                            "DidNoRecordExistChoice": "yes",
                            "InstitutionAgreedRequestOnInformalBasis": "not_sure",
                            "SummarizeYourConcernsAndAnyStepsTaken": "poiuiop",
                            "documentation_file_upload": [
                                { "name": "test.txt", "type": "text/plain", "content": "10921680" },
                                { "name": "test.txt", "type": "text/plain", "content": "10921680" },
                                { "name": "layout.txt", "type": "text/plain", "content": "2735" },
                                { "name": "New Text Document_one.txt", "type": "text/plain", "content":"4" }
                             ]
                        };

                        let dataToSend = JSON.stringify(data, null, 3);

                        var xhr = new XMLHttpRequest();
                        xhr.open("POST", "/api/CompletedSurvey/SurveyPA?complaintId=" + sender.complaintId);
                        xhr.setRequestHeader("Content-Type", "application/json; charset=utf-8");
                        xhr.onload = xhr.onerror = function () {
                            if (xhr.status == 200) {
                                options.showDataSavingSuccess(); // you may pass a text parameter to show your own text
                                // Or you may clear all messages:
                                // options.showDataSavingClear();

                                //  Hide the navigation buttons
                                $("#div_navigation").hide();

                                //  Update the file reference number
                                $("#sp_survey_file_number").html(result.referenceNumber);

                                //survey.clear(true, true);
                                //clearLocalStorage(storageName_PA);
                                saveStateLocally(survey, storageName_PA);

                            } else {
                                //Error
                                options.showDataSavingError(); // you may pass a text parameter to show your own text
                            }
                        };
                        xhr.send(dataToSend);

                        console.log(dataToSend);

                        //  Hide the navigation buttons
                        $("#div_navigation").hide();

                        survey.clear(true, true);
                        clearLocalStorage(storageName_Test);
                    });


                survey
                    .onCurrentPageChanged
                    .add(onCurrentPageChanged_saveState);

                $("#pdfPreviewBtn").click(function () {

                    var filename = "surveyResult.pdf";

                    var options = {
                        fontSize: 14,
                        margins: {
                            left: 10,
                            right: 10,
                            top: 10,
                            bot: 10
                        },
                        format: "a4",
                        fontName: 'times',
                        fontStyle: 'normal'
                    };

                    var surveyPDF = new SurveyPDF.SurveyPDF(json, options);
                    surveyPDF.data = survey.data;
                    surveyPDF.save(filename);
                });


                // ****Event *****************************************************

                var app = new Vue({
                    el: '#surveyElement',
                    data: {
                        survey: survey
                    }
                });
            });

    </script>
}

<div id="surveyElement" style="display:inline-block;width:100%;">
    <survey :survey='survey' />
</div>

<div id="surveyResult"></div>

<center>
    <div id="div_navigation">
        <button id="btnSurveyPrev" onclick="survey.prevPage();" class="btn btn-primary">@Localizer.GetLocalizedString("btnSurveyPrev")</button>
        <button id="btnSurveyNext" onclick="survey.nextPage();" class="btn btn-primary">@Localizer.GetLocalizedString("btnSurveyNext")</button>
        <button id="btnShowPreview" onclick="showPreview(survey);" class="btn btn-primary">@Localizer.GetLocalizedString("btnShowPreview")</button>
        <button id="btnComplete" onclick="survey.doComplete();" class="btn btn-primary">@Localizer.GetLocalizedString("btnComplete")</button>
        <button id="btnEndSession" onclick="endSession()" class="btn btn-primary">@Localizer.GetLocalizedString("btnEndSession")</button>
        <button id="btnStart" onclick="startSurvey(survey);" class="btn btn-primary">Start</button>
        <button id="pdfPreviewBtn" style="margin:10px" class="btn btn-primary">PDF Preview</button>
    </div>
</center>
