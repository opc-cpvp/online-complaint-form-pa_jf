
@{ ViewData["Title"] = "Survey PIPEDA"; }

@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf

@functions
{ public string GetAntiXsrfRequestToken()
            {
                return Xsrf.GetAndStoreTokens(Context).RequestToken;
            } 
    }

<h1>Survey</h1>

<div id="surveyElement" style="display:inline-block;width:100%;">
    <survey :survey='survey' />
</div>
<div id="surveyResult"></div>


@section CSS {
    <link rel="stylesheet" href="~/lib/survey/survey.min.css" />
}

@section Scripts {
    <script src="~/lib/vue/vue.min.js"></script>
    <script src="~/lib/survey/survey.vue.min.js"></script>

    <script>
        $(document).ready(function () {


        });

        //function MyTextValidator(params) {
        //    var value = params[0];
        //    return value.indexOf("survey");
        //}

        function HasInstitutionSelected(params) {
            var value = params[0];
           // alert(value)
            // value is the id of the institution
            return value !== "";
        }

        function endSession() {
            var url = "/Home/Index";
            window.location.href = url;
        }

        fetch("/sample-data/survey_complaint.json")
            .then(response => response.json())
            .then(json => {
                survey = new Survey.Model(json);

                let myCss = {
                    navigationButton: "btn btn-primary",
                    html: "sq-html"
                };

                survey.cssType = "bootstrap";
                survey.css = myCss;

                // Register the function for use in SurveyJS expressions
                Survey
                    .FunctionFactory
                    .Instance
                    .register("HasInstitutionSelected", HasInstitutionSelected);

                //Survey
                //    .FunctionFactory
                //    .Instance
                //    .register("MyTextValidator", MyTextValidator);

                survey
                    .onComplete
                    .add(function (result) {

                        let dataType = 'application/json; charset=utf-8';
                        let data = JSON.stringify(result.data, null, 3);

                        $.ajax({
                            type: "POST",
                            url: "@Url.Action("Survey")",
                            headers: { "RequestVerificationToken": '@GetAntiXsrfRequestToken()' },
                            dataType: 'json',
                            contentType: dataType,
                            data: data,
                            success: function (msg) {
                                console.log(msg);
                            },
                            error: function (req, status, error) {
                                alert(error);
                            }
                        });
                    });

                //survey.onValidateQuestion.add(function (sender, options) {
                //    if (options.name == "institution") {
                //        //  This requires an option to be selected... not solving the problem of not having anything selected
                //        alert(options.value)
                //        if (options.value < 1 || options.value > 9) options.error = "Please enter value from 1 till 9.";
                //    }
                //});

                // DICTIOPNNARY
                survey.requiredText = "(required)";
               survey.setVariable("part_a_2_title", "Part A: Preliminary information (Identify institution)-Privacy complaint form (federal institution)");
                survey.setVariable("part_b_1_title", "Part B: Steps taken (Writing to the ATIP Coordinator)-Privacy complaints form (federal institution)");

                //survey
                //    .onUpdateQuestionCssClasses
                //    .add(function (survey, options) {
                //        var classes = options.cssClasses

                //        classes.root = "sq-root";
                //        classes.title = "sq-title"
                //        classes.item = "sq-item";
                //        classes.label = "sq-label";

                //        if (options.question.isRequired) {
                //            classes.title += " sq-title-required";
                //            classes.root += " sq-root-required";
                //        }

                //        if (options.question.getType() === "checkbox") {
                //            classes.root += " sq-root-cb";
                //        }
                //    });

                survey.onCurrentPageChanged.add(function (survey) {
                    setBreadCrumbs(survey.currentPageNo);
                });



                 /**here jf **/
    @*Object.defineProperty(PageModel.prototype, "breadcrum_title", {
        /**
         * PageModel breadcrum_title property.
         * @description
         */
        get: function () {
            return this.getLocalizableStringText("breadcrum_title");
        },
        set: function (val) {
            this.setLocalizableStringText("breadcrum_title", val);
        },
        enumerable: true,
        configurable: true
    });*@

                let app = new Vue({
                    el: `#surveyElement`,
                    data: {
                        survey: survey
                    }
                });
            });
    </script>
}