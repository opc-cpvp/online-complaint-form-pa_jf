
@{
    ViewData["Title"] = "DetailsPA";
}

@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@inject ComplaintFormCore.Resources.SharedViewLocalizer Localizer

@functions
{
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Context).RequestToken;
    }
}



<div id="surveyElement" style="display:inline-block;width:100%;">
    <survey :survey='survey' />
</div>

<div id="surveyResult"></div>

<center>
    <div id="div_navigation">
        <button id="btnSurveyPrev" onclick="survey.prevPage();" class="btn btn-primary">@Localizer.GetLocalizedString("btnSurveyPrev")</button>
        <button id="btnSurveyNext" onclick="survey.nextPage();" class="btn btn-primary">@Localizer.GetLocalizedString("btnSurveyNext")</button>
        <button id="btnShowPreview" onclick="survey.showPreview();" class="btn btn-primary">@Localizer.GetLocalizedString("btnShowPreview")</button>
        <button id="btnComplete" onclick="survey.doComplete();" class="btn btn-primary">@Localizer.GetLocalizedString("btnComplete")</button>
        <button id="btnEndSession" onclick="endSession()" class="btn btn-primary">@Localizer.GetLocalizedString("btnEndSession")</button>
        @*<button id="btnSave" onclick="save()" class="btn btn-primary">Save</button>*@
    </div>
</center>

@section CustomStyles {

    <link href="~/css/site.css" rel="stylesheet" />
}

@section CustomScripts {
    <script src="~/lib/vue/vue.min.js"></script>
    <script src="~/js/survey/survey.vue.OPC.js"></script>
    <script src="~/js/survey/SurveyInit.js"></script>
    <script src="~/js/survey/SurveyLocalStorage.js"></script>

    <script src="~/js/survey/widgets/widgetCheckboxHtml.js"></script>
    <script src="~/js/survey/widgets/widgetCommentHtml.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/showdown/1.9.1/showdown.min.js"></script>


    <script>
        //$(document).ready(function () {


        //});

        //  This is to open the additional information div when a checkbox is being checked or hide it when the checkbox is un-checked.
        //  It will also remove or add the item being chekced or unchecked from the json data
        function checkBoxInfoPopup(checkbox) {

            var parent = $(checkbox).closest("div");

            if ($(checkbox).is(':checked')) {
                parent.find(".info-popup").show();

                //  adding the checked item to the json object
                survey.data[checkbox.name].push(checkbox.value);
            }
            else {

                parent.find(".info-popup").hide();

                //  removing the un-checked item from the json object
                for (var i = 0; i < survey.data[checkbox.name].length; i++) {
                    if (survey.data[checkbox.name][i] === checkbox.value)
                    {
                        survey.data[checkbox.name].splice(i, 1);
                    }
                }
            }
        }

        function onCurrentPageChanged_saveState(survey) {

            saveStateLocally(survey, storageName_PA);
        }

        initSurvey(Survey);

        var json = "/sample-data/survey_pa_complaint_" + '@System.Threading.Thread.CurrentThread.CurrentCulture.TwoLetterISOLanguageName' + ".json";
        //var json = "/sample-data/survey_test.json";

        fetch(json)
            .then(response => response.json())
            .then(json => {

                survey = new Survey.Model(json);

                 //  Add events only applicable to this page **********************

                // This EVENT bindings needs to be here
                survey
                    .onComplete
                    .add(function (result) {

                        let dataType = 'application/json; charset=utf-8';
                        let data = JSON.stringify(result.data, null, 3);

                        console.log(data);

                        $.ajax({
                            type: "POST",
                            url: "@Url.Action("Survey")",
                            headers: { "RequestVerificationToken": '@GetAntiXsrfRequestToken()' },
                            dataType: 'json',
                            contentType: dataType,
                            data: data,
                            success: function (msg) {

                                //  Hide the navigation buttons
                                $("#div_navigation").hide();

                                survey.clear(true, true);
                                //saveStateLocally(survey, storageName)
                            },
                            error: function (req, status, error) {
                                alert(error);
                            }
                        });
                    });

                //  Adding particular event for this page only
                survey
                    .onCurrentPageChanged
                    .add(onCurrentPageChanged_saveState);

                // ****Event *****************************************************

                initSurveyModelEvents(survey);

                initSurveyModelProperties(survey);

                //  TODO:   for now, in order to be able to use the checkboxes with addiotional htnl info, we
                //          need to specify the array object type_complaint. There has to be a more elegant way of doing this.
                //survey.data = {
                //    "type_complaint": [""]
                //};

                var defaultData  = {
                    "filing_own_behalf": "yourself",
                    "raised_concern_writing": "yes",
                    "type_complaint": [
                        "NatureOfComplaintOther",
                        "NatureOfComplaintDelay",
                        "NatureOfComplaintExtensionOfTime",
                        "NatureOfComplaintCollection"
                    ],
                    "description_IsEmployee": "genral_public",
                    "AdditionalComments": "iuyiuyuiyiuy",
                    "complainant_HaveYouSubmittedBefore": "No",
                    "complainant_title": "Mr.",
                    "complainant_first_name": "jf",
                    "complainant_last_name": "brouillette",
                    "complainant_email": "jf@hotmail.com",
                    "complainant_mailing_address": "66",
                    "complainant_city": "gat",
                    "complainant_postal_code": "J9A2V5",
                    "complainant_daytime_phone": "6135656667",
                    "complainant_NeedsDisabilityAccommodation": "Yes",
                    "complainant_NeedsDisabilityAccommodation_details": "iuyuiyiuyiuy",
                    "documentation_type": "none",
                    "WhatWouldResolveYourComplaintDetailsPA": "gsdgdfgsdf",
                    "SummarizeAttemptsToResolvePrivacyMatter": "gdfghjvbcvbcxvbxcvbxbcvb",
                    "Institution": "3",
                    "complainant_country": "CA",
                    "complainant_provinces": "2",
                    "DateSentRequests": "qwerewr",
                    "WordingOfRequest": "hgdffgh",
                    "MoreDetailsOfRequest": "oiuyoiuo",
                    "DateOfFinalAnswer": "gfhfjgj",
                    "DidNoRecordExist": "Yes",
                    "InstitutionAgreedRequestOnInformalBasis": "Not sure",
                    "SummarizeYourConcernsAndAnyStepsTaken_A": "poiuiop"
                };

                //  Load the initial state
                loadStateLocally(survey, storageName_PA, defaultData);

                //  Save the state back to local storage
                onCurrentPageChanged_saveState(survey);

                //  Call the event to set the navigation buttons on page load
                onCurrentPageChanged_updateNavButtons(survey);

                // DICTIONNARY - this is just to show how to use localization
                survey.setVariable("part_a_2_title", "Part A: Preliminary information (Identify institution)-Privacy complaint form (federal institution)");
                survey.setVariable("part_b_1_title", "Part B: Steps taken (Writing to the ATIP Coordinator)-Privacy complaints form (federal institution)");

                var app = new Vue({
                    el: '#surveyElement',
                    data: {
                        survey: survey
                    }
                });
            });
    </script>
}

